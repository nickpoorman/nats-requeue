// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package flatbuf

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

/// The stats for an instance.
type InstanceStatsMessage struct {
	_tab flatbuffers.Table
}

func GetRootAsInstanceStatsMessage(buf []byte, offset flatbuffers.UOffsetT) *InstanceStatsMessage {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &InstanceStatsMessage{}
	x.Init(buf, n+offset)
	return x
}

func (rcv *InstanceStatsMessage) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *InstanceStatsMessage) Table() flatbuffers.Table {
	return rcv._tab
}

/// The unique id of the instance.
func (rcv *InstanceStatsMessage) InstanceId() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The unique id of the instance.
func (rcv *InstanceStatsMessage) Queues(obj *QueueStatsMessage, j int) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		x := rcv._tab.Vector(o)
		x += flatbuffers.UOffsetT(j) * 4
		x = rcv._tab.Indirect(x)
		obj.Init(rcv._tab.Bytes, x)
		return true
	}
	return false
}

func (rcv *InstanceStatsMessage) QueuesLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func InstanceStatsMessageStart(builder *flatbuffers.Builder) {
	builder.StartObject(2)
}
func InstanceStatsMessageAddInstanceId(builder *flatbuffers.Builder, instanceId flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(instanceId), 0)
}
func InstanceStatsMessageAddQueues(builder *flatbuffers.Builder, queues flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(queues), 0)
}
func InstanceStatsMessageStartQueuesVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func InstanceStatsMessageEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
/// The stats for a queue.
type QueueStatsMessage struct {
	_tab flatbuffers.Table
}

func GetRootAsQueueStatsMessage(buf []byte, offset flatbuffers.UOffsetT) *QueueStatsMessage {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &QueueStatsMessage{}
	x.Init(buf, n+offset)
	return x
}

func (rcv *QueueStatsMessage) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *QueueStatsMessage) Table() flatbuffers.Table {
	return rcv._tab
}

/// The name of the queue.
func (rcv *QueueStatsMessage) QueueName() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The name of the queue.
/// The number of messages in the queue.
func (rcv *QueueStatsMessage) Enqueued() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

/// The number of messages in the queue.
func (rcv *QueueStatsMessage) MutateEnqueued(n int64) bool {
	return rcv._tab.MutateInt64Slot(6, n)
}

/// The number of in flight messages waiting to be acknowledged.
func (rcv *QueueStatsMessage) InFlight() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

/// The number of in flight messages waiting to be acknowledged.
func (rcv *QueueStatsMessage) MutateInFlight(n int64) bool {
	return rcv._tab.MutateInt64Slot(8, n)
}

func QueueStatsMessageStart(builder *flatbuffers.Builder) {
	builder.StartObject(3)
}
func QueueStatsMessageAddQueueName(builder *flatbuffers.Builder, queueName flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(queueName), 0)
}
func QueueStatsMessageAddEnqueued(builder *flatbuffers.Builder, enqueued int64) {
	builder.PrependInt64Slot(1, enqueued, 0)
}
func QueueStatsMessageAddInFlight(builder *flatbuffers.Builder, inFlight int64) {
	builder.PrependInt64Slot(2, inFlight, 0)
}
func QueueStatsMessageEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
