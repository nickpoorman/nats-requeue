// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package flatbuf

import (
	"strconv"

	flatbuffers "github.com/google/flatbuffers/go"
)

type BackoffStrategy int8

const (
	BackoffStrategyUndefined   BackoffStrategy = 0
	BackoffStrategyExponential BackoffStrategy = 1
	BackoffStrategyFixed       BackoffStrategy = 2
)

var EnumNamesBackoffStrategy = map[BackoffStrategy]string{
	BackoffStrategyUndefined:   "Undefined",
	BackoffStrategyExponential: "Exponential",
	BackoffStrategyFixed:       "Fixed",
}

var EnumValuesBackoffStrategy = map[string]BackoffStrategy{
	"Undefined":   BackoffStrategyUndefined,
	"Exponential": BackoffStrategyExponential,
	"Fixed":       BackoffStrategyFixed,
}

func (v BackoffStrategy) String() string {
	if s, ok := EnumNamesBackoffStrategy[v]; ok {
		return s
	}
	return "BackoffStrategy(" + strconv.FormatInt(int64(v), 10) + ")"
}

/// RequeueMeta holds meta information about requeue message functionality.
type RequeueMeta struct {
	_tab flatbuffers.Table
}

func GetRootAsRequeueMeta(buf []byte, offset flatbuffers.UOffsetT) *RequeueMeta {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &RequeueMeta{}
	x.Init(buf, n+offset)
	return x
}

func (rcv *RequeueMeta) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *RequeueMeta) Table() flatbuffers.Table {
	return rcv._tab
}

/// The number of times requeue should be attempted.
func (rcv *RequeueMeta) Retries() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return -1
}

/// The number of times requeue should be attempted.
func (rcv *RequeueMeta) MutateRetries(n int64) bool {
	return rcv._tab.MutateInt64Slot(4, n)
}

/// The TTL for when the msssage should expire. This is useful for ensuring
/// messages are not retried after a certain time.
func (rcv *RequeueMeta) Ttl() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return -1
}

/// The TTL for when the msssage should expire. This is useful for ensuring
/// messages are not retried after a certain time.
func (rcv *RequeueMeta) MutateTtl(n int64) bool {
	return rcv._tab.MutateInt64Slot(6, n)
}

/// The delay before the message should be replayed in nanoseconds.
func (rcv *RequeueMeta) Delay() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return -1
}

/// The delay before the message should be replayed in nanoseconds.
func (rcv *RequeueMeta) MutateDelay(n int64) bool {
	return rcv._tab.MutateInt64Slot(8, n)
}

/// Backoff strategy that will be used for determining the next delay should
/// the message fail to be acknowledged on replay. i.e. fixed interval or
/// exponential
func (rcv *RequeueMeta) BackoffStrategy() BackoffStrategy {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return BackoffStrategy(rcv._tab.GetInt8(o + rcv._tab.Pos))
	}
	return 0
}

/// Backoff strategy that will be used for determining the next delay should
/// the message fail to be acknowledged on replay. i.e. fixed interval or
/// exponential
func (rcv *RequeueMeta) MutateBackoffStrategy(n BackoffStrategy) bool {
	return rcv._tab.MutateInt8Slot(10, int8(n))
}

func RequeueMetaStart(builder *flatbuffers.Builder) {
	builder.StartObject(4)
}
func RequeueMetaAddRetries(builder *flatbuffers.Builder, retries int64) {
	builder.PrependInt64Slot(0, retries, -1)
}
func RequeueMetaAddTtl(builder *flatbuffers.Builder, ttl int64) {
	builder.PrependInt64Slot(1, ttl, -1)
}
func RequeueMetaAddDelay(builder *flatbuffers.Builder, delay int64) {
	builder.PrependInt64Slot(2, delay, -1)
}
func RequeueMetaAddBackoffStrategy(builder *flatbuffers.Builder, backoffStrategy BackoffStrategy) {
	builder.PrependInt8Slot(3, int8(backoffStrategy), 0)
}
func RequeueMetaEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
/// The format for serializing requeue message.
type RequeueMessage struct {
	_tab flatbuffers.Table
}

func GetRootAsRequeueMessage(buf []byte, offset flatbuffers.UOffsetT) *RequeueMessage {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &RequeueMessage{}
	x.Init(buf, n+offset)
	return x
}

func (rcv *RequeueMessage) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *RequeueMessage) Table() flatbuffers.Table {
	return rcv._tab
}

/// RequeueMeta holds meta information about requeue message functionality.
func (rcv *RequeueMessage) Meta(obj *RequeueMeta) *RequeueMeta {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		x := rcv._tab.Indirect(o + rcv._tab.Pos)
		if obj == nil {
			obj = new(RequeueMeta)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

/// RequeueMeta holds meta information about requeue message functionality.
/// The original subject of the message.
func (rcv *RequeueMessage) OriginalSubject() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The original subject of the message.
/// Original message payload
func (rcv *RequeueMessage) OriginalPayload(j int) byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.GetByte(a + flatbuffers.UOffsetT(j*1))
	}
	return 0
}

func (rcv *RequeueMessage) OriginalPayloadLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *RequeueMessage) OriginalPayloadBytes() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Original message payload
func (rcv *RequeueMessage) MutateOriginalPayload(j int, n byte) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.MutateByte(a+flatbuffers.UOffsetT(j*1), n)
	}
	return false
}

func RequeueMessageStart(builder *flatbuffers.Builder) {
	builder.StartObject(3)
}
func RequeueMessageAddMeta(builder *flatbuffers.Builder, meta flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(meta), 0)
}
func RequeueMessageAddOriginalSubject(builder *flatbuffers.Builder, originalSubject flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(originalSubject), 0)
}
func RequeueMessageAddOriginalPayload(builder *flatbuffers.Builder, originalPayload flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(2, flatbuffers.UOffsetT(originalPayload), 0)
}
func RequeueMessageStartOriginalPayloadVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(1, numElems, 1)
}
func RequeueMessageEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
