namespace flatbuf;

enum BackoffStrategy : byte { Undefined = 0, Exponential, Fixed }

/// RequeueMeta holds meta information about requeue message functionality.
table RequeueMeta {
    /// The number of times requeue should be attempted.
    retries: uint64 = 0;

    /// The TTL for when the msssage should expire. This is useful for ensuring
	/// messages are not retried after a certain amount time. TTL must be expressed
    /// as the number of nanosecods to expire after the message has been committed.
    ttl: uint64 = 0;

    /// The delay before the message should be replayed in nanoseconds.
    delay: uint64 = 0;

    /// Backoff strategy that will be used for determining the next delay should
	/// the message fail to be acknowledged on replay. i.e. fixed interval or
	/// exponential
    backoff_strategy: BackoffStrategy;

    /// The persistence queue events will be stored in.
    /// This can be useful if you need multiple queues by priority.
    /// On the sever you can configure the priority certain queues 
    /// should have over other. This way you can ensure a given high volumn 
    /// queue does not starve out a low volumn queue.
    /// The default queue is "default" when one is not provided.
    persistence_queue: string;
}

/// The format for serializing requeue message.
table RequeueMessage {
    /// RequeueMeta holds meta information about requeue message functionality.
    meta: RequeueMeta;

    /// The original subject of the message.
    original_subject: string;

    /// Original message payload
    original_payload: [ubyte];    
}